{"/home/travis/build/npmtest/node-npmtest-libxmljs/test.js":"/* istanbul instrument in package npmtest_libxmljs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-libxmljs/lib.npmtest_libxmljs.js":"/* istanbul instrument in package npmtest_libxmljs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_libxmljs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_libxmljs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-libxmljs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-libxmljs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_libxmljs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_libxmljs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_libxmljs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_libxmljs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_libxmljs.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_libxmljs.__dirname +\n                    '/lib.npmtest_libxmljs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-libxmljs/node_modules/libxmljs/index.js":"// js acts as a wrapper to the c++ bindings\n// prefer to do error handling and other abstrctions in the\n// js layer and only go to c++ when we need to hit libxml\nvar bindings = require('./lib/bindings');\n\n// document parsing for backwards compat\nvar Document = require('./lib/document');\n\n/// parse an xml string and return a Document\nmodule.exports.parseXml = Document.fromXml;\n\n/// parse an html string and return a Document\nmodule.exports.parseHtml = Document.fromHtml;\nmodule.exports.parseHtmlFragment = Document.fromHtmlFragment;\n\n// constants\nmodule.exports.version = require('./package.json').version;\nmodule.exports.libxml_version = bindings.libxml_version;\nmodule.exports.libxml_parser_version = bindings.libxml_parser_version;\nmodule.exports.libxml_debug_enabled = bindings.libxml_debug_enabled;\nmodule.exports.features = bindings.features;\n\n// lib exports\nmodule.exports.Comment = require('./lib/comment');\nmodule.exports.Document = Document;\nmodule.exports.Element = require('./lib/element');\nmodule.exports.Text = require('./lib/text');\n\n// Compatibility synonyms\nDocument.fromXmlString = Document.fromXml;\nDocument.fromHtmlString = Document.fromHtml;\nmodule.exports.parseXmlString = module.exports.parseXml;\nmodule.exports.parseHtmlString = module.exports.parseHtml;\n\nvar sax_parser = require('./lib/sax_parser');\nmodule.exports.SaxParser = sax_parser.SaxParser;\nmodule.exports.SaxPushParser = sax_parser.SaxPushParser;\n\nmodule.exports.memoryUsage = bindings.xmlMemUsed;\n\nmodule.exports.nodeCount = bindings.xmlNodeCount;\n","/home/travis/build/npmtest/node-npmtest-libxmljs/node_modules/libxmljs/lib/bindings.js":"module.exports = require('bindings')('xmljs');\n","/home/travis/build/npmtest/node-npmtest-libxmljs/node_modules/libxmljs/lib/document.js":"var bindings = require('./bindings');\n\nvar Element = require('./element');\n\nfunction assertRoot(doc) {\n    if(!doc.root()) {\n        throw new Error('Document has no root element');\n    }\n}\n\n/// Create a new document\n/// @param {string} version xml version, default 1.0\n/// @param {string} encoding the encoding, default utf8\n/// @constructor\nfunction Document(version, encoding) {\n    version = version || '1.0';\n    var doc = new bindings.Document(version);\n    doc.encoding(encoding || 'utf8');\n    return doc;\n}\n\nDocument.prototype = bindings.Document.prototype;\n\n/// get or set the root element\n/// if called without any arguments, this will return the document root\n/// @param {Element} [elem] if specified, this will become the new document root\nDocument.prototype.root = function(elem) {\n    return this._root(elem);\n};\n\n/// add a child node to the document\n/// this will set the document root\nDocument.prototype.node = function(name, content) {\n    return this.root(Element(this, name, content));\n};\n\n/// xpath search\n/// @return array of matching elements\nDocument.prototype.find = function(xpath, ns_uri) {\n    assertRoot(this);\n\n    return this.root().find(xpath, ns_uri);\n};\n\n/// xpath search\n/// @return first element matching\nDocument.prototype.get = function(xpath, ns_uri) {\n    assertRoot(this);\n\n    return this.root().get(xpath, ns_uri);\n};\n\n/// @return a given child\nDocument.prototype.child = function(id) {\n    if (id === undefined || typeof id !== 'number') {\n        throw new Error('id argument required for #child');\n    }\n\n    assertRoot(this);\n\n    return this.root().child(id);\n};\n\n/// @return an Array of child nodes of the document root\nDocument.prototype.childNodes = function() {\n    assertRoot(this);\n\n    return this.root().childNodes();\n};\n\n/// @return a string representation of the document\nDocument.prototype.toString = function(formatted) {\n    return this._toString(formatted !== undefined ? formatted : true);\n};\n\n/// @return the document version\nDocument.prototype.version = function() {\n    return this._version();\n};\n\n/// @return the document encoding\nDocument.prototype.encoding = function(encoding) {\n    return this._encoding(encoding);\n};\n\n/// @return whether the XmlDocument is valid\nDocument.prototype.validate = function(xsd) {\n    return this._validate(xsd);\n};\n\n/// @return whether the XmlDocument is valid using Relaxed NG\nDocument.prototype.rngValidate = function(rng) {\n    return this._rngValidate(rng);\n};\n\nDocument.prototype.getDtd = function() {\n    return this._getDtd();\n};\n\nDocument.prototype.setDtd = function(name, ext, sys) {\n    if (!name) {\n        throw new Error('Must pass in a DTD name');\n    } else if (typeof name !== 'string') {\n        throw new Error('Must pass in a valid DTD name');\n    }\n\n    var params = [name];\n    if (typeof ext !== 'undefined') {\n        params.push(ext);\n    }\n    if (ext && typeof sys !== 'undefined') {\n        params.push(sys);\n    }\n\n    return this._setDtd.apply(this, params);\n};\n\n/// @return array of namespaces in document\nDocument.prototype.namespaces = function() {\n    assertRoot(this);\n\n    return this.root().namespaces();\n};\n\nDocument.prototype.type = function() {\n    return 'document';\n};\n\nmodule.exports = Document;\n\n/// parse a string into a html document\n/// @param string html string to parse\n/// @param {encoding:string, baseUrl:string} opts html string to parse\n/// @return a Document\nmodule.exports.fromHtml = function(string, opts) {\n    opts = opts || {};\n\n    // if for some reason user did not specify an object for the options\n    if (typeof(opts) !== 'object') {\n        throw new Error('fromHtml options must be an object');\n    }\n\n    return bindings.fromHtml(string, opts);\n};\n\n/// parse a string into a html document fragment\n/// @param string html string to parse\n/// @param {encoding:string, baseUrl:string} opts html string to parse\n/// @return a Document\nmodule.exports.fromHtmlFragment = function(string, opts) {\n    opts = opts || {};\n\n    // if for some reason user did not specify an object for the options\n    if (typeof(opts) !== 'object') {\n        throw new Error('fromHtmlFragment options must be an object');\n    }\n\n    opts.doctype = false;\n    opts.implied = false;\n\n    return bindings.fromHtml(string, opts);\n};\n\n/// parse a string into a xml document\n/// @param string xml string to parse\n/// @return a Document\nmodule.exports.fromXml = function(string, options) {\n    return bindings.fromXml(string, options || {});\n};\n\n","/home/travis/build/npmtest/node-npmtest-libxmljs/node_modules/libxmljs/lib/element.js":"var bindings = require('./bindings');\n\n/// create a new element on the given document\n/// @param doc the Document to create the element for\n/// @param name the element name\n/// @param {String} [contenn] element content\n/// @constructor\nfunction Element(doc, name, content) {\n    if (!doc) {\n        throw new Error('document argument required');\n    } else if (! (doc instanceof bindings.Document)) {\n        throw new Error('document argument must be an ' +\n                        'instance of Document');\n    } else if (!name) {\n        throw new Error('name argument required');\n    }\n\n    return new bindings.Element(doc, name, content);\n}\n\nElement.prototype = bindings.Element.prototype;\n\nElement.prototype.attr = function() {\n    if (arguments.length === 1) {\n        var arg = arguments[0];\n        if (typeof arg === 'object') {\n            // object setter\n            // iterate keys/value to set attributes\n            for (var k in arg) {\n                this._attr(k, arg[k]);\n            };\n            return this;\n        } else if (typeof arg === 'string') {\n            // getter\n            return this._attr(arg);\n        }\n    } else if (arguments.length === 2) {\n        // 2 arg setter\n        var name = arguments[0];\n        var value = arguments[1];\n        this._attr(name, value);\n        return this;\n    }\n};\n\n/// helper method to attach a new node to this element\n/// @param name the element name\n/// @param {String} [content] element content\nElement.prototype.node = function(name, content) {\n    var elem = Element(this.doc(), name, content);\n    this.addChild(elem);\n    return elem;\n};\n\n/// helper method to attach a cdata to this element\n/// @param name the element name\n/// @param {String} [content] element content\nElement.prototype.cdata = function(content) {\n  this.addCData(content);\n  return this;\n};\n\nElement.prototype.get = function() {\n    var res = this.find.apply(this, arguments);\n    if (res instanceof Array) {\n        return res[0];\n    } else {\n        return res;\n    }\n};\n\nElement.prototype.defineNamespace = function(prefix, href) {\n    // if no prefix specified\n    if (!href) {\n        href = prefix;\n        prefix = null;\n    }\n    return new bindings.Namespace(this, prefix, href);\n};\n\nmodule.exports = Element;\n\n","/home/travis/build/npmtest/node-npmtest-libxmljs/node_modules/libxmljs/lib/comment.js":"var bindings = require('./bindings');\n\nvar Document = require('./document');\n\n/// create a new comment on the given document\n/// @param doc the Document to create the comment for\n/// @param {String} [content] comment content\n/// @constructor\nvar Comment = function(doc, content) {\n    if (!doc) {\n        throw new Error('document argument required');\n    } else if (! (doc instanceof bindings.Document)) {\n        throw new Error('document argument must be an ' +\n                        'instance of Document');\n    }\n\n    return new bindings.Comment(doc, content);\n};\n\nComment.prototype = bindings.Comment.prototype;\n\nmodule.exports = Comment;\n\n","/home/travis/build/npmtest/node-npmtest-libxmljs/node_modules/libxmljs/lib/text.js":"var bindings = require(\"./bindings\");\n\n/// create a new element on the given document\n/// @param doc the Document to create the element for\n/// @param name the element name\n/// @param {String} [contenn] element content\n/// @constructor\n\n\nfunction Text(doc, content) {\n    if (!doc) {\n        throw new Error('document argument required');\n    }\n\n    if (!(doc instanceof bindings.Document)) {\n        throw new Error('document argument must be an instance of Document');\n    }\n\n    if (!content) {\n        throw new Error('content argument required');\n    }\n\n    return new bindings.Text(doc, content);\n}\n\nText.prototype = bindings.Text.prototype;\n\nmodule.exports = Text;\n","/home/travis/build/npmtest/node-npmtest-libxmljs/node_modules/libxmljs/lib/sax_parser.js":"var events = require('events');\n\nvar bindings = require('./bindings');\n\nvar SaxParser = function(callbacks) {\n    var parser = new bindings.SaxParser();\n\n    // attach callbacks\n    for (var callback in callbacks) {\n        parser.on(callback, callbacks[callback]);\n    }\n\n    return parser;\n};\n\n// Overriding the prototype, like util.inherit, wipes out the native binding.\n// Copy over the methods instead.\nfor (var k in events.EventEmitter.prototype)\n    bindings.SaxParser.prototype[k] = events.EventEmitter.prototype[k];\n\nvar SaxPushParser = function(callbacks) {\n    var parser = new bindings.SaxPushParser();\n\n    // attach callbacks\n    for (var callback in callbacks) {\n        parser.on(callback, callbacks[callback]);\n    }\n\n    return parser;\n};\n\n// Overriding the prototype, like util.inherit, wipes out the native binding.\n// Copy over the methods instead.\nfor (var k in events.EventEmitter.prototype)\n    bindings.SaxPushParser.prototype[k] = events.EventEmitter.prototype[k];\n\nmodule.exports.SaxParser = SaxParser;\nmodule.exports.SaxPushParser = SaxPushParser;\n\n"}